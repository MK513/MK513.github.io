name: deploy # workflow 이름은 'deploy'

on: # 이 workflow가 반응하는 조건들
  push: # push가 일어났을 때
    branches: # push가 일어나는 branch 종류 2가지
      - master
      - main
  pull_request: # pull_request 발생했을때
    branches: # pull_request가 일어나는 branch 종류 2가지
      - master
      - main
  workflow_dispatch: # 수동으로 trigger 발생시켰을 때

permissions: # workflow 권한 설정
  contents: write # 쓰기 권한을 설정함

jobs: # 이하 내용들을 jobs으로 정의함
  deploy: # 이하 내용을 deploy 라는 이름의 job으로 정의함
    # available images: https://github.com/actions/runner-images#available-images
    runs-on: ubuntu-latest # 우분투 최신 버전에서 실행됨
    steps: # 이하 내용들을 steps로 정의함
    - name: Checkout 🛎️  # 첫번째 step 이름은 'Checkout'
      uses: actions/checkout@v3 # 레포의 소스코드를 내려받음
      
    - name: Setup Ruby  # 두번째 step 이름은 'Setup Ruby'
      uses: ruby/setup-ruby@v1 # Ruby 환경 설정함
      with: # 세부 내용 설정
        ruby-version: '3.2.2' # Ruby version을 3.2.2로 설정함
        bundler-cache: true  # Bundler의 cache를 활성화함
        
    - name: Update _config.yml ⚙️ # 세번째 step 이름은 'Update _config.yml'
      uses: fjogeleit/yaml-update-action@v0.13.1 # YAML 파일의 업데이트를 자동화
      with: # 세부 내용 설정
        commitChange: false # YAML 파일이 업데이트되어도 자동으로 커밋되지 않음
        valueFile: '_config.yml' # 업데이트할 파일의 경로
        propertyPath: 'giscus.repo' # 업데이트할 속성의 경로
        value: ${{ github.repository }} # 경로에 새로 할당할 값
        
    - name: Install and Build 🔧 # 네번째 step 이름은 'Install and Build'
      run: | # 이하 명령들을 순차적으로 실행함
        pip3 install --upgrade jupyter  # Jupyter 버전 업데이트
        npm install -g mermaid.cli # Mermaid CLI 전역 설치
        npm install -g purgecss # Purgecss 전역 설치
        export JEKYLL_ENV=production # jekyll_env 환경변수 설정해서 프로덕션환경에서 실행
        bundle exec jekyll build --lsi # 프로젝트 빌드
        purgecss -c purgecss.config.js # 사용하지 않는 CSS 제거
        
    - name: Deploy 🚀 # 다섯번째 step 이름은 'Deploy'
      if: github.event_name != 'pull_request' # pull_request가 아닌 경우에만 실행
      uses: JamesIves/github-pages-deploy-action@v4 # 프로젝트 배포
      with: # 세부 내용 설정
        folder: _site # 배포할 폴더 지정

